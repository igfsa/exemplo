=> Iniciar o git 
	$ git init

=> Monitorar o projeto com o git, se existem mudanças a serem adicionadas ou commitadas, etc
	$ git status

=> Limpar o projeto git de arquivos e pastas desnecessários ou criados erroneamente (garbage collector). Útil em casos de text file busy
	$ git gc

=> O arquivo .gitignore serve para adicionar diferentes arquivos ou tipos de arquivos que devem ser ignorados para o repositório git. Por exemplo, arquivos de textes, arquivos de banco de dados, ou arquivos com credenciais
	Podem ser adicionados:
		arquivos, como <exemplo.txt> 
		diretórios. como <**diretorio>, ao utilizar ** o git mapeia os subdiretórios 
		extensões, como <*.sql>, desta forma, todos os arquivos com a extensão indicada serão ignorados
	O link a sequir apresenta um repositório no git com modelos de gitignore para os principais tipos de projetos https://github.com/github/gitignore

=> Ao iniciar o git em um repositório deve ser iniciado um usuário para identificar quem está realizando as operações
	$ git config user.name "<usuario>"
	$ git config user.email "<usuario@email.com>"
	Em computadores com apenas um usuário os usuários podem ser habilitados globalmente, assim ao iniciar um novo repositório o usuário será inciado automaticamente 
		$ git config --global user.name "usuario"
		$ git config --global user.email "usuario@email.com"
	O usuário inciado pode ser identificado no arquivo config, existente dentro da pasta git. Ao utilizar $ git config estamos alterando este arquivo (config)
	Para buscar itens dentro de config podem utilizar a opção --get do comando. Por exemplo, buscar o nome do usuário configurado no repositório
		$ git config --get user.name

=> Para adicionar ou atualizar um arquivo ao repositório git, é necessário utilizar o comando 
	$ git add <arquivo> 
=> Podem ser adicionados ou atualizados todos arquivos ao mesmo tempo artavés do comando 
	$ git add . 

=> Após a criação e adição nos repositórios locais, é necessário adicionar o arquivo ao repositório remoto do git através de commit, podemos identificar se existem arquivos a serem commitados, podemos verificar o status do repositório
	$ git commit -m '<mensagem>'
		A opção -m do comando commit permite adicionar uma mensagem ao commit realizado. 
		Como retorno do commit, recebemos informações da operação realizada e o hash id da operação no repositório remoto.

=> Visualizar o log do repositório
	$ git log
		Aqui é possível identificar os commits que ocorreram no repositório. O hash id retornado quando realizamos um add ao repositório são os 7 primeiros digitos das identificações das operações retornadas no arquivo de log
		Também são retornados o comentário e dados de hora e data e usuário
		Para navegar na saída do comando, a tecla enter exibe mais linhas e ctrl+b volta para as linhas iniciais. Digitar /<exemplo> permite realizar busca dentro do log 
		Para sair do arquivo digitar q
	Para visualizar os ultimos n logs
		$ git log -n
	Para visualizar os logs resumidos em uma linha 
		$ git log --oneline
	Para visualizar os logs antes de determinada data
		$ git log --before="<AAAA-MM-DD>"
	Para visualizar os logs depois de determinada data
		$ git log --after="<AAAA-MM-DD>"
	Para visualizar os logs desde de determinado tempo
		$ git log --since="<n> days ago"
	Para visualizar os logs de determinado autor 
		$ git log --author="<nome>"
			*Obs: Case sensitive, porém realiza a busca parcial, não é necessário digitar o nome completo
	Para alterar se o log será retornado exibindo todo o arquivo 
		$ git config core.pager cat
	Caso seja desejado que o log exiba apenas o tamanho da tela do terminal 
		$ git config core.pager less
		
=> O arquivo log identifica os últimos commits no repositório local e remoto, no último commit vemos o indicativo head. Este indicativo mostra a "cabeça" atual do repositório
	Porém, é possível indicar outro id como head, assim fazendo com que a imagem dos arquivos volte ao ponto do 
		$ git checkout <hashid>
	Para retornar ao último commit
		$ git checkout main
 
 => É possível utilizar o git para renomar arquivos ou diretórios
	$ git mv <item> <novonome>
	Caso o rename de um item seja feito pelo explorador, será necessário executar o comando git add com o nome do item antigo
	
=> Também é possível utilizar o git para deletar arquivos ou diretórios
	$ git rm <item>
	Assim como para o rename, ao deletar um item pelo explorador, será necessário executar o comando git add com o nome do item antigo

=> É possível visualizar a diferença entre commits utilizando o git 
	Diferença entre o momento atual e o último commit:
		$ git diff
	Diferença entre as mudanças indicadas em status e o último commit:
		$ git diff --staged 
	Diferença entre o momento atual e um específico commit:
		$ git diff <hashid>
	Diferença entre dois específicos commits:
		$ git diff <hashid mais velho>..<hashid mais novo>

=> O comando ammend permite alteração do último commit. Caso a mensagem do arquivo esteja errada ou tenha faltado algum item, este comando permite refazer no último commit 
	$ git commit --amend -m '<mensagem>'

=> Um item que foi adicionado ao estágio (através de git add) pode ser removido
	$ git restore --staged exemplo.html

=> É possível retornar um item ao ponto do último commit (o arquivo não pode estar em estágio)
	$ git checkout <item>
	Caso tenha necessidade de fazer em todos os arquivos
	$ git checkout .
	$ git reset HEAD --hard
	
=> Para retornar ao commit anterior após um novo commit
	$ git reset HEAD' --hard

=> Observa-se que o uso de git reset recebe como parâmetro um commit, então o comando pode ser utilizado para retornar em determinado commit
	$ git reset <hashid> --hard

=> Branchs (ramificações) são utilizados para trabalhar com diferentes linhas de trabalho simultaneamente. Uma pessoa pode estar desenvolvendo uma funcionalidade ao mesmo tempo que outra pessoa está desenvolvendo outra.
A base de um branch é o ponto de inicio do branch, o último commit em comum entre o ramo principal e o novo

						base
		base			  |--------------> branch B
--------|-----------------|-----------------------> projeto
        |-------------> branch A

=> É possível ver os branchs existentes no projeto
	$ git branch 
	O branch principal (branch que está sendo utilizado no momento) é indicado com um asterisco  

=> Para criar um novo branch
	$ git branch <nome_branch>

=> Para alterar para determinada branch 
	$ git checkout <nome_branch>

=> É possível criar um branch já em seu acesso 
	$ git checkout -b <nome_branch>
		A opção -b cria um novo branch, é uma ação correspondente a executar a criação do brench e logo após acessá-lo

=> Para deletar um branch (obs.: o uso de -D ao invés de -d força a deleção de uma branch que não foi adicioanada a principal através de merge ou rebase)
	$ git branch -D <nome_branch>

=> Merges mesclam duas branchs em um novo commit posterior na branch principal

				 base			merge
main	-1-2-3-4-|-5-6-7-8-9-10-11|-12-13-14-> 
branch 			 |a.5-a.6-a.7-a.8/ 

=> Para fazer um merge entre branchs 
	$ git merge <nome_branch>
		O comando deve ser rodado da branch principal com o parâmetro sendo a branch a ser adicionada
		Após o merge, a branch auxiliar pode ser deletada
			$ git branch -d <nome_branch>

=> Rebases inserem as mudanças da branch no momento da base e criam uma nova base a partir deste ponto, inserindo as modificações feitas na main após a nova base

				base			 rebase (nova base)
main	-1-2-3-4|                |-5-6-7-8-9-10-11-12-> 
branch 			|a.5-a.6-a.7-a.8/ 

=> Para fazer um rebase entre branchs 
	$ git rebase <nome_branch>
		O comando deve ser rodado da branch principal com o parâmetro sendo a branch a ser adicionada
		Após o rebase, a branch auxiliar pode ser deletada
			$ git branch -d <nome_branch>

=> É possível utilizar o git para clonar projetos em diferentes locais. Desta forma é possível, posteriormente, buscar e enviar novos commits no projeto de origem
	$ git clone <projeto base> <local de clonagem>

=> Trabalhando de um projeto clonado é possível buscar novos commits sem realizar mesclagem com o trabalho feito no projeto de origem
	$ git fetch
		Os arquivos ficam armazenados dentro da pasta config, para serem adicionados na pasta princiapal, deve ser executado
			$ git rebase

=> Para realizar as duas operações (fetch e rebase juntamente) 
	$ git pull 
		O projeto corrente não deve possuir commits a serem enviados para o projeto de origem



