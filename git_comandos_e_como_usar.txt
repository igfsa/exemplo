=> Iniciar o git 
	$ git init

=> Monitorar o projeto com o git, se existem mudanças a serem adicionadas ou commitadas, etc
	$ git status

=> Limpar o projeto git de arquivos e pastas desnecessários ou criados erroneamente (garbage collector). Útil em casos de text file busy
	$ git gc

=> O arquivo .gitignore serve para adicionar diferentes arquivos ou tipos de arquivos que devem ser ignorados para o repositório git. Por exemplo, arquivos de testes, arquivos de banco de dados, ou arquivos com credenciais
	Podem ser adicionados:
		arquivos, como <exemplo.txt> 
		diretórios. como <**diretorio>, ao utilizar ** o git mapeia os subdiretórios 
		extensões, como <*.sql>, desta forma, todos os arquivos com a extensão indicada serão ignorados
	O link a seguir apresenta um repositório no git com modelos de gitignore para os principais tipos de projetos https://github.com/github/gitignore

=> Ao iniciar o git em um repositório deve ser iniciado um usuário para identificar quem está realizando as operações
	$ git config user.name "<usuario>"
	$ git config user.email "<usuario@email.com>"
	Em computadores com apenas um usuário os usuários podem ser habilitados globalmente, assim ao iniciar um novo repositório o usuário será iniciado automaticamente 
		$ git config --global user.name "usuario"
		$ git config --global user.email "usuario@email.com"
	O usuário inserido pode ser identificado no arquivo config, existente dentro da pasta git. Ao utilizar $ git config estamos alterando este arquivo (config)
	Para buscar itens dentro de config podem utilizar a opção --get do comando. Por exemplo, buscar o nome do usuário configurado no repositório
		$ git config --get user.name

=> Para adicionar ou atualizar um arquivo ao índice do repositório git, é necessário utilizar o comando 
	$ git add <arquivo> 
	Podem ser adicionados ou atualizados todos arquivos ao mesmo tempo através do comando 
		$ git add . 
	Esta adição se faz necessária sempre que ocorra criação ou alteração de um arquivo no repositório 

=> Após a criação e adição dos arquivos e inclusão no índice do repositório, é necessário realizar um commit, que indicará o estado atual do índice, criando um identificador (hasid) que será adicionado ao log do repositório. 
	$ git commit -m '<mensagem>'
		A opção -m do comando commit permite adicionar uma mensagem ao commit realizado. 
		Como retorno do commit, recebemos informações da operação realizada e o hash id da operação no repositório remoto.

=> Visualizar o log do repositório
	$ git log
		Aqui é possível identificar os commits que ocorreram no repositório. O hash id retornado quando realizamos um add ao repositório são os 7 primeiros dígitos das identificações das operações retornadas no arquivo de log
		Também são retornados o comentário e dados de hora e data e usuário
		Para navegar na saída do comando, a tecla enter exibe mais linhas e ctrl+b volta para as linhas iniciais. Digitar /<exemplo> permite realizar busca dentro do log 
		Para sair do arquivo digitar q
	Para visualizar os últimos n logs
		$ git log -n
	Para visualizar os logs resumidos em uma linha 
		$ git log --oneline
	Para visualizar os logs antes de determinada data
		$ git log --before="<AAAA-MM-DD>"
	Para visualizar os logs depois de determinada data
		$ git log --after="<AAAA-MM-DD>"
	Para visualizar os logs desde de determinado tempo
		$ git log --since="<n> days ago"
	Para visualizar os logs de determinado autor 
		$ git log --author="<nome>"
			*Obs: Case sensitive, porém realiza a busca parcial, não é necessário digitar o nome completo
	Para alterar se o log será retornado exibindo todo o arquivo 
		$ git config core.pager cat
	Caso seja desejado que o log exiba apenas o tamanho da tela do terminal 
		$ git config core.pager less
		
=> O arquivo log identifica os últimos commits no repositório local e remoto, no último commit vemos o indicativo head. Este indicativo mostra a "cabeça" atual do repositório
	Porém, é possível indicar outro id como head, assim fazendo com que a imagem dos arquivos volte ao ponto do commit indicado pelo hashid
		$ git checkout <hashid>
	Para retornar ao último commit
		$ git checkout main
 
 => É possível utilizar o git para renomear arquivos ou diretórios
	$ git mv <item> <novonome>
	Caso o rename de um item seja feito pelo explorador, será necessário executar o comando git add com o nome do item antigo
	
=> Também é possível utilizar o git para deletar arquivos ou diretórios
	$ git rm <item>
	Assim como para o rename, ao deletar um item pelo explorador, será necessário executar o comando git add com o nome do item antigo

=> É possível visualizar a diferença entre commits utilizando o git 
	Diferença entre o momento atual e o último commit:
		$ git diff
	Diferença entre as mudanças indicadas em status e o último commit:
		$ git diff --staged 
	Diferença entre o momento atual e um específico commit:
		$ git diff <hashid>
	Diferença entre dois específicos commits:
		$ git diff <hashid mais velho>..<hashid mais novo>

=> O comando amend permite alteração do último commit. Caso a mensagem do arquivo esteja errada ou tenha faltado algum item, este comando permite refazer no último commit 
	$ git commit --amend -m '<mensagem>'

=> Um item que foi adicionado ao estágio (através de git add) pode ser removido
	$ git restore --staged exemplo.html

=> É possível retornar um item ao ponto do último commit 
	Para arquivos que não foram colocados em estágio:
		$ git checkout <item>
		Caso tenha necessidade de fazer em todos os arquivos
		$ git checkout .
	Para arquivos que foram colocados em estágio
		$ git reset HEAD --hard
		$ git checkout HEAD -- .
			A opção -- faz com que o comando ignore opções adicionais	

=> Para retornar ao commit anterior após um novo commit
	$ git reset HEAD' --hard

=> Observa-se que o uso de git reset recebe como parâmetro um commit, então o comando pode ser utilizado para retornar em determinado commit
	$ git reset <hashid> --hard

			    hashid		  	 
				  /6-7-8-9-10-11->
main	-1-2-3-4-|5|-x-x-x-x-x-x-| reset 
                  ^______________/  

 
=> O uso de reset sem a opção hard permite reverter a adição de arquivos ao estágio, porém sem perder suas alterações.
	$ git reset HEAD 

=> Branchs (ramificações) são utilizados para trabalhar com diferentes linhas de trabalho simultaneamente. Uma pessoa pode estar desenvolvendo uma funcionalidade ao mesmo tempo que outra pessoa está desenvolvendo outra.
A base de um branch é o ponto de inicio do branch, o último commit em comum entre o ramo principal e o novo

						base
		base			  |--------------> branch B
--------|-----------------|-----------------------> projeto
        |-------------> branch A

=> É possível ver os branchs existentes no projeto
	$ git branch 
	O branch principal (branch que está sendo utilizado no momento) é indicado com um asterisco  

=> Para criar um novo branch
	$ git branch <nome_branch>

=> Para alterar para determinada branch 
	$ git checkout <nome_branch>

=> É possível criar um branch já em seu acesso 
	$ git checkout -b <nome_branch>
		A opção -b cria um novo branch, é uma ação correspondente a executar a criação do branch e logo após acessá-lo

=> Para deletar um branch (obs.: o uso de -D ao invés de -d força a deleção de uma branch que não foi adicionada a principal através de merge ou rebase)
	$ git branch -D <nome_branch>

=> Merges mesclam duas branchs em um novo commit posterior na branch principal

				 base			merge
main	-1-2-3-4-|-5-6-7-8-9-10-11|-12-13-14-> 
branch 			 |a.5-a.6-a.7-a.8/ 

=> Para fazer um merge entre branchs 
	$ git merge <nome_branch>
		O comando deve ser rodado da branch principal com o parâmetro sendo a branch a ser adicionada
		Após o merge, a branch auxiliar pode ser deletada
			$ git branch -d <nome_branch>

=> Rebases inserem as mudanças da branch no momento da base e criam uma nova base a partir deste ponto, inserindo as modificações feitas na main após a nova base

				base			 rebase (nova base)
main	-1-2-3-4|                |-5-6-7-8-9-10-11-12-> 
branch 			|a.5-a.6-a.7-a.8/ 

=> Para fazer um rebase entre branchs 
	$ git rebase <nome_branch>
		O comando deve ser rodado da branch principal com o parâmetro sendo a branch a ser adicionada
		Após o rebase, a branch auxiliar pode ser deletada
			$ git branch -d <nome_branch>

=> É possível utilizar o git para clonar projetos em diferentes locais. Desta forma é possível, posteriormente, buscar e enviar novos commits no projeto de origem
	$ git clone <projeto base> <local de clonagem>

=> Trabalhando de um projeto clonado é possível buscar novos commits sem realizar mesclagem com o trabalho feito no projeto de origem
	$ git fetch
		Os arquivos ficam armazenados dentro da pasta config, para serem adicionados na pasta principal, deve ser realizado um rebase ou um merge

=> Para realizar as duas operações (fetch e rebase juntamente) 
	$ git pull 
		O projeto corrente não deve possuir commits a serem enviados para o projeto de origem

=> Bare repositories são repositórios centralizados, utilizados para compartilhamento de códigos entre diferentes sessões. O GitHub é um exemplo de bare repository
	Permite que outros repositórios enviem push com modificações para esse repositório central 
	Ao criar um bare, o repositório é iniciado sem a pasta .git, o conteúdo dessa pasta é criado diretamente na pasta
	$ git init --bare 
		Os diretórios que irão enviar as modificações ao bare devem clonar o diretório bare inicial

=> Com o uso de bare repositories é possível subir para o repositório central modificações feitas
	$ git push

=> As tags no git indicam um determinado commit, representando o momento indicado. Similar aos branchs, onde ao realizar um branch é criado uma base para o mesmo, porém as tags não permitem novos commits baseados nelas
	Tags são úteis para versionamento ou entregas parciais de funcionalidade por exemplo. Permitem que o ambiente seja copiado ou visualizado no momento que foi criada 

				tag				  tag
main	-1-2-3-4-|-5-6-7-8-9-10-11-|-12-13-14-> 
				v1.0			  v2.0

=> Para criar uma tag 
	$ git tag <nome_tag>

=> Para visualizar as tags existentes
	$ git tag

=> Após a criação a tag deve ser enviada via push para o repositório centralizador
	$ git push origin <nome_tag>
	Uma vez no repositório central, ela funcionará como outros objetos (como branchs), sendo necessário que os outros repositórios façam um pull para acessá-la

=> É possível acessar as tags e visualizar o repositório em seu momento
	$ git checkout <nome_tag>
	Como não é possível realizar commits em tags, para trabalhar nas mesmas é necessário criar um branch baseado na tag. É possível criar e já fazer o acesso com apenas um comando
		$ git switch -c <nome_branch>
		$ git checkout -b <nome_branch>
			Os comandos acima realizam a mesma ação. O comando checkout foi inserido primeiramente e realiza ações visando branchs e arquivos. O git, para evitar confusões, em 2019 criou os comandos switch para manipular apenas branchs e restore para manipular apenas arquivos
			Após a criação da branch o processo de criação e edição de itens, além do processo de commits são feitos de forma normal. Uma vez finalizada as alterações na branch ela pode ser mesclada à master e pode ser criada uma nova tag

=> O comando revert volta os objetos do repositório para um commit indicado, porém não remove os commits anteriores, gerando um novo commit. Desta forma, alterações que foram feitas ainda podem ser acessadas pelo log do repositório
	$ git revert <hashid>
		Por padrão o comando já commita as mudanças em sua execução. É um atalho para realizar checkout dos arquivos para um momento anterior, adição de arquivos em estágio e commit com uma mensagem indicando a mudança 
		Este comando é útil pois mudanças que forem descartadas ainda podem ser vistas no log do repositório
		Funciona de forma análoga ao comando reset, porém o comando reset remove os commits entre o commit indicado e o momento atual

			    hashid		  	  revert
main	-1-2-3-4-|5|-6-7-8-9-10-11-|12|-13-14-> 
                  ^_________________/  

 => Para projetos com divergências entre branchs (por exemplo, um novo commit em uma máquina local e um novo commit no servidor), se faz necessário tratar os erros de conflito. 
	Por padrão o Git não realiza mais trativas para divergências e exibe uma mensagem de erro.

		hint: You have divergent branches and need to specify how to reconcile them.
		hint: You can do so by running one of the following commands sometime before
		hint: your next pull:
		hint: 
		hint:   git config pull.rebase false  # merge (the default strategy)
		hint:   git config pull.rebase true   # rebase
		hint:   git config pull.ff only       # fast-forward only
		hint: 
		hint: You can replace "git config" with "git config --global" to set a default
		hint: preference for all repositories. You can also pass --rebase, --no-rebase,
		hint: or --ff-only on the command line to override the configured default per
		hint: invocation.

	Conforme exibido na mensagem, existem 3 maneiras de lidar com a situação que podem ser configuradas através de git config: 
		-> merge commit (comportamento padrão histórico)
			$ git config pull.rebase false
				Cria um novo commit que é pai dos commits que estão em conflito. Por sem um merge, pode gerar conflitos.
		-> rebasing nos commit locais 
			$ git config pull.rebase true
				Ao realizar um rebase nos commits locais, é possível adicionar os commits do servidor remoto na master branch primeiramente e depois realizar um merge entre este e nossos commits locais. Devido ao merge também pode gerar conflitos
		-> não faça nada por padrão (fast-forward)
			$ git config pull.ff only 
				Realiza as operações que não requerem nenhuma tratativa de conflitos, caso seja necessário, o processo é abrotado e é retornado uma mensagem de erro. 
				É uma estratégia que possui benefícios pois os conflitos são tratados manualmente, assim reduzindo a chance de erros ou correções impróprias.

	Independente das configurações aplicadas, é possível aplicar um pull com instruções para rebase simples 
		$ git pull --rebase
	Ou realizar um merge commit 
		$ git pull --rebase=merges
	Essas duas opções apresentam a necessidade de tratar as divergências manualmente, o que cria a necessidade de análise dos arquivos e assim realizar as operações para a criação de um commit.
		Será criado uma branch detached para as ações necessárias. Uma vez nela, para acompanhar o que foi realizado e o que ainda deve ser feito pode ser utilizado o comando status.
		Com as alterações adicionadas para estágio, será necessário realizar um commit e continuar o rebase 
			$ git rebase --continue
		Após essas operações, será retornado para a branch principal com um novo commit realizado, assim criando a necessidade de realizar por fim o pull


